getwd()
library(devtools)
use_git()
library(devtools)
use_mit_license()
use_readme_rmd()
usethis::use_code_of_conduct
library(devtools)
usethis::use_code_of_conduct()
usethis::use_tidy_contributing()
usethis::use_tidy_contributing()
knitr::opts_chunk$set(echo = TRUE)
feature_desc_data <- read.csv('data/feature_descriptions.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.1 - Feature descriptions")
feature_desc_data <- read.csv('data/feature_descriptions.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.1 - Feature descriptions")
feature_desc_data <- read.csv('data/preprocessing.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.2 - Preprocessing operations performed on features")
knitr::opts_chunk$set(echo = TRUE)
feature_desc_data <- read.csv('data/preprocessing.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.2 - Preprocessing operations performed on features")
feature_desc_data <- read.csv('data/grid_search_ridge.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.3.1 - Ridge model optimization iterations")
feature_desc_data <- read.csv('data/grid_search_rf.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 3.3.2 - Ridge model optimization iterations")
knitr::opts_chunk$set(echo = TRUE)
feature_desc_data <- read.csv('data/test_scores.csv')
knitr::kable(data.frame(feature_desc_data), caption = "Table 4.1 - Test set scores")
knitr::include_graphics('../data/predicted_vs_actual_chart.png')
knitr::include_graphics('data/predicted_vs_actual_chart.png')
grid_rd <- read.csv('data/grid_search_ridge.csv')
knitr::kable(data.frame(grid_rd), caption = "Table 3.3.1 - Ridge model optimization iterations")
test_data <- read.csv('data/test_scores.csv')
knitr::kable(data.frame(test_data), caption = "Table 4.1 - Test set scores")
test_data <- read.csv('data/test_scores.csv')
knitr::kable(data.frame(test_data), caption = "Table 4.1 - Test set scores")
test_data <- read.csv('data/test_scores.csv')
knitr::kable(data.frame(test_data), caption = "Table 4.1 - Test set scores")
feature_desc_data <- read.csv('data/positive_coefficients.csv')
coef_data_pos <- read.csv('data/positive_coefficients.csv')
coef_data_pos <- read.csv('data/positive_coefficients_ridge.csv')
knitr::kable(data.frame(coef_data_pos), caption = "Table 4.2 - predictors")
coef_data_pos <- read.csv('data/positive_coefficients_ridge.csv')
knitr::kable(data.frame(coef_data_pos), caption = "Table 4.2.1 - Top 10 positive predictors of salary")
coef_data_pos <- read.csv('data/positive_coefficients_ridge.csv')
knitr::kable(data.frame(coef_data_pos), caption = "Table 4.2.2 - Top 10 positive predictors of salary")
coef_data_neg <- read.csv('data/positive_coefficients_ridge.csv')
knitr::kable(data.frame(coef_data_neg), caption = "Table 4.2.2 - Top 10 negative predictors of salary")
coef_data_neg <- read.csv('data/negative_coefficients_ridge.csv')
knitr::kable(data.frame(coef_data_neg), caption = "Table 4.2.2 - Top 10 negative predictors of salary")
use_testthat
use_testthat()
library(devtools)
use_testthat()
use_test("homoscedasticity")
getpwd()
getpwd()
getwd()
library(devtools)
install()
install()
install()
install()
test()
use_package('tidyverse')
library(devtools)
use_package('tidyverse')
test()
test()
test()
use_package('tibble')
use_package('ggplot2')
use_package('tidyverse::tibble')
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
test()
library(devtools)
library(linregasm)
test()
test()
multicollinearity(tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 9), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
test_that("multicollinearity() with below values returns a p-value less than 0.05", {
expect_equal(round(multicollinearity(tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 9), "X3" = c(30, 7, 8), "y"=c(2, 5, 6)), "y ~ X1+X2+X3")$VIF[3], 2), 831.20)
})
formula <- as.formula(formula)
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
expect_equal(round(multicollinearity(tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6)), "y ~ X1+X2+X3")$VIF[2], 2), 831.20)
expect_equal(round(multicollinearity(tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6)), "y ~ X1+X2+X3")$VIF[3], 2), 831.20)
multicollinearity(tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
multicollinearity(df, formula)
df <- tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "Y~X1+X2"
multicollinearity(df, formula)
library(dplyr)
library(car)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(car::vif(linreg)) |>
dplyr::rename(VIF = value)
multicollinearity_cases <- df_vif |>
filter(VIF > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "Y~X1+X2"
multicollinearity(df, formula)
df <- tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
multicollinearity(df, formula)
df <- tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
vif
df <- tibble("X1"=c(2, 3, 4),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
library(dplyr)
library(car)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(car::vif(linreg)) |>
dplyr::rename(VIF = value)
print(linreg)
multicollinearity_cases <- df_vif |>
filter(VIF > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
library(dplyr)
library(car)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(car::vif(linreg)) |>
dplyr::rename(VIF = value)
print(df_vif)
multicollinearity_cases <- df_vif |>
filter(VIF > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
library(dplyr)
library(car)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(car::vif(linreg))
print(df_vif)
multicollinearity_cases <- df_vif |>
filter(VIF > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
library(dplyr)
library(car)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(car::vif(linreg))
print(df_vif)
multicollinearity_cases <- df_vif |>
filter(value > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
library(dplyr)
multicollinearity <- function(data, formula, vif_threshold = 10) {
if (typeof(data) != 'list'){
stop("Error: input data must be a dataframe")
}
if (typeof(formula) != 'character' || !grepl("~", formula)){
stop("Error: formula parameter has incorrect formatting, formula must be a string in the format Y ~ x1 + x2 + ..., or Y ~ .")
}
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df_vif <- as_tibble(vif(linreg))
print(df_vif)
multicollinearity_cases <- df_vif |>
filter(value > vif_threshold) |>
nrow()
if (multicollinearity_cases != 0){
print("There is multicollinearity in your data. Consider removing features with high VIF")
}
return (df_vif)
}
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
vif = multicollinearity(df, formula)
print(vif)
?vif
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- "y~X1+X2"
formula <- as.formula(formula)
linreg <- lm(formula, data = data)
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- as.formula("y~X1+X2")
linreg <- lm(formula, data = df)
df_vif <- car::vif(linreg)
df_vif
df <- tibble("X1"=c(2, 3, 15),"X2"=c(-7, 8, 10), "X3" = c(30, 7, 8), "y"=c(2, 5, 6))
formula <- as.formula("y~X1+X2")
linreg <- lm(formula, data = df)
df_vif <- car::vif(linreg)
linreg
library(devtools)
test()
use_package("knitr")
usethis::use_vignette("linregasm")
library(linregasm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data(iris)
iris
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
plot, corr_df <- homoscedasticity(formula, iris_df)
results <- homoscedasticity(formula, iris_df)
library(linregasm)
results <- homoscedasticity(formula, iris_df)
devtools::install(build_vignette = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- homoscedasticity(formula, iris_df)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = data(iris)
homoscedasticity(iris_df, formula)
results <- linregasm::homoscedasticity(formula, iris_df)
check()
library(devtools)
results <- linregasm::homoscedasticity(formula, iris_df)
check()
results <- linregasm::homoscedacity(formula, iris_df)
results <- linregasm::homoscedasticity(formula, iris_df)
results <- linregasm::homoscedasticity(iris_df, formula)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
typeof(iris_df)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results[[2]]
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results[[2]]
check()
devtools::install(build_vignette = FALSE)
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results[[2]]
results <- linregasm::homoscedasticity(iris_df, formula)
usethis::use_vignette("linregasm")
library(linregasm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results[[2]]
check()
usethis::use_vignette("linregasm_documentation")
library(linregasm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
results[[2]]
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
test()
check()
check()
install(build_vignettes = FALSE)
check()
library(linregasm)
check()
install(build_vignettes = FALSE)
check()
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
check()
test()
install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
multicollinearity(iris_df, formula)
normality(iris_df, formula)
multicollinearity(iris_df, formula)
multicollinearity(iris_df, formula)
library(devtools)
install(build_vignettes = FALSE)
linregasm::multicollinearity(iris_df, formula)
linregasm::multicollinearity(iris_df, formula)
install(build_vignettes = FALSE)
linregasm::multicollinearity(iris_df, formula)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
normality(iris_df, formula)
linregasm::multicollinearity(iris_df, formula)
norm_results <- normality(iris_df, formula)
mult_results <- linregasm::multicollinearity(iris_df, formula)
mult_results <- linregasm::multicollinearity(iris_df, formula)
document
document()
mult_results <- linregasm::multicollinearity(iris_df, formula)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
norm_results <- normality(iris_df, formula)
mult_results <- linregasm::multicollinearity(iris_df, formula)
mult_results <- linregasm::multicollinearity(iris_df, formula)
mult_results
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(linregasm)
data(iris)
head(iris)
formula = "Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length"
iris_df = iris
results <- linregasm::homoscedasticity(iris_df, formula)
results[[1]]
hsc_results <- linregasm::homoscedasticity(iris_df, formula)
hsc_results
norm_results <- normality(iris_df, formula)
norm_results
norm_results <- normality(iris_df, formula)
norm_results
install()
install.packages("pkgdown")
